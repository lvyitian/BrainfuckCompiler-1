package com.skiwi.bfcompiler.analyzers;

import com.skiwi.bfcompiler.source.SourceFile;
import com.skiwi.bfcompiler.tokens.Token;
import org.junit.Test;

import java.nio.file.Path;
import java.nio.file.Paths;

import static com.skiwi.bfcompiler.tokens.Token.*;
import static org.junit.Assert.*;

/**
 * @author Frank van Heeswijk
 */
public class LexicalAnalyzerTest {
    @Test
    public void testGetTokens() throws Exception {
        Path file = Paths.get(getClass().getClassLoader().getResource("hello-world.bf").toURI());
        SourceFile sourceFile = new SourceFile(file);
        LexicalAnalyzer lexicalAnalyzer = new LexicalAnalyzer(sourceFile);

        Token[] expectedTokens = {};

        assertArrayEquals(expectedTokens, lexicalAnalyzer.getTokens().toArray());
    }

    @Test
    public void testGetTokensWithIgnored() throws Exception {
        Path file = Paths.get(getClass().getClassLoader().getResource("hello-world-ignored.bf").toURI());
        SourceFile sourceFile = new SourceFile(file);
        LexicalAnalyzer lexicalAnalyzer = new LexicalAnalyzer(sourceFile);

        Token[] expectedTokens = {};

        assertArrayEquals(expectedTokens, lexicalAnalyzer.getTokens().toArray());
    }
}